# name of executable

PROJECT=$(notdir $(CURDIR))


# Tool path

GCC_BIN=/l/arm/arm-none-eabi/bin

# Library path

LIBROOT=/l/arm

# Tools

AS      = $(GCC_BIN)/arm-none-eabi-as
CC      = $(GCC_BIN)/arm-none-eabi-gcc
CPP     = $(GCC_BIN)/arm-none-eabi-g++
LD      = $(GCC_BIN)/arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)/arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)/arm-none-eabi-objdump
SIZE    = $(GCC_BIN)/arm-none-eabi-size

# Code Paths

TARGET=TARGET_LPC11U24
CORE=$(LIBROOT)/mbed/$(TARGET)/TOOLCHAIN_GCC_ARM
USB=$(LIBROOT)/usb/$(TARGET)/TOOLCHAIN_GCC_ARM

LIBRARY_PATHS = -L$(CORE) -L$(USB)
LIBRARIES = -lmbed -lUSBDevice
LINKER_SCRIPT = $(CORE)/LPC11U24.ld


# Search paths

vpath %.c .
vpath %.o $(CORE)
vpath %.c $(CORE)
vpath %.c $(USB)

# include paths

TARGROOT=$(LIBROOT)/mbed/TARGET_LPC11U24

INCLUDE_PATHS=  -I. 
INCLUDE_PATHS+= -I$(LIBROOT)/mbed
INCLUDE_PATHS+= -I$(TARGROOT)
INCLUDE_PATHS+= -I$(TARGROOT)/TOOLCHAIN_GCC_ARM
INCLUDE_PATHS+= -I$(TARGROOT)/TARGET_NXP/TARGET_LPC11UXX 
#INCLUDE_PATHS+= -I$(TARGROOT)/TARGET_NXP/TARGET_LPC11UXX/TARGET_LPC11U24_401
INCLUDE_PATHS+= -I$(TARGROOT)/TARGET_NXP/TARGET_LPC11UXX/TARGET_OC_MBUINO


INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBDevice 
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBDevice/USBDevice
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBMSD
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBSerial
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBHID
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBMIDI
INCLUDE_PATHS+= -I$(LIBROOT)/usb/USBAudio

SYS_OBJECTS=  startup_LPC11xx.o retarget.o 
SYS_OBJECTS+= board.o system_LPC11Uxx.o cmsis_nvic.o

#
#  Most of these flags are from the mbed export
#

CPU = -mcpu=cortex-m0 -mthumb
CC_FLAGS =  $(CPU) -c -g -fno-common -fmessage-length=0 
CC_FLAGS += -Wall -fno-exceptions -ffunction-sections 
CC_FLAGS += -fdata-sections -fomit-frame-pointer
CC_FLAGS += -MMD -MP
CC_SYMBOLS = -DTARGET_LPC11U24 -DTARGET_M0 -DTARGET_CORTEX_M 
CC_SYMBOLS += -DTARGET_NXP -DTARGET_LPC11UXX 
#CC_SYMBOLS += -DTARGET_OC_MBUINO -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC 
CC_SYMBOLS += -D__CORTEX_M0 -DARM_MATH_CM0 
#CC_SYMBOLS += -DMBED_BUILD_TIMESTAMP=1421358253.26 -D__MBED__=1

LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -Wl,--wrap,main
LD_FLAGS += -Wl,-Map=$(PROJECT).map,--cref
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

#
# Here's where the build happens
#

all: $(PROJECT).bin $(PROJECT).hex

clean:
	rm -f $(PROJECT).bin $(PROJECT).elf $(PROJECT).hex 
	rm -f $(PROJECT).map $(PROJECT).lst $(OBJECTS) $(DEPS)

.s.o:
	$(AS) $(CPU) -o $@ $<

.c.o:
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

.cpp.o:
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti \
	$(INCLUDE_PATHS) -o $@ $<

$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
		$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) \
		-o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) \
		$(LIBRARIES) $(LD_SYS_LIBS)
		$(SIZE) $@

$(PROJECT).bin: $(PROJECT).elf
		@$(OBJCOPY) -O binary $< $@
		$(TEMPLATE_ROOT)/checksum $@

$(PROJECT).hex: $(PROJECT).elf
		@$(OBJCOPY) -O ihex $< $@

$(PROJECT).lst: $(PROJECT).elf
		@$(OBJDUMP) -Sdh $< > $@

lst: $(PROJECT).lst

size:
	$(SIZE) $(PROJECT).elf

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)

